// Code generated by dagger. DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log/slog"
	"os"
	"sort"

	"github.com/vektah/gqlparser/v2/gqlerror"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/sdk/resource"
	semconv "go.opentelemetry.io/otel/semconv/v1.26.0"
	"go.opentelemetry.io/otel/trace"

	"github.com/frantjc/forge/internal/dagger"
	"github.com/frantjc/forge/internal/querybuilder"
	"github.com/frantjc/forge/internal/telemetry"
)

var dag = dagger.Connect()

func Tracer() trace.Tracer {
	return otel.Tracer("dagger.io/sdk.go")
}

// used for local MarshalJSON implementations
var marshalCtx = context.Background()

// called by main()
func setMarshalContext(ctx context.Context) {
	marshalCtx = ctx
	dagger.SetMarshalContext(ctx)
}

type DaggerObject = querybuilder.GraphQLMarshaller

type ExecError = dagger.ExecError

// ptr returns a pointer to the given value.
func ptr[T any](v T) *T {
	return &v
}

// convertSlice converts a slice of one type to a slice of another type using a
// converter function
func convertSlice[I any, O any](in []I, f func(I) O) []O {
	out := make([]O, len(in))
	for i, v := range in {
		out[i] = f(v)
	}
	return out
}

func (r Forge) MarshalJSON() ([]byte, error) {
	var concrete struct{}
	return json.Marshal(&concrete)
}

func (r *Forge) UnmarshalJSON(bs []byte) error {
	var concrete struct{}
	err := json.Unmarshal(bs, &concrete)
	if err != nil {
		return err
	}
	return nil
}

func (r PreAction) MarshalJSON() ([]byte, error) {
	var concrete struct {
		Action Action
	}
	concrete.Action = r.Action
	return json.Marshal(&concrete)
}

func (r *PreAction) UnmarshalJSON(bs []byte) error {
	var concrete struct {
		Action Action
	}
	err := json.Unmarshal(bs, &concrete)
	if err != nil {
		return err
	}
	r.Action = concrete.Action
	return nil
}

func (r Cloudbuild) MarshalJSON() ([]byte, error) {
	var concrete struct {
		FinalizedCloudbuild FinalizedCloudbuild
	}
	concrete.FinalizedCloudbuild = r.FinalizedCloudbuild
	return json.Marshal(&concrete)
}

func (r *Cloudbuild) UnmarshalJSON(bs []byte) error {
	var concrete struct {
		FinalizedCloudbuild FinalizedCloudbuild
	}
	err := json.Unmarshal(bs, &concrete)
	if err != nil {
		return err
	}
	r.FinalizedCloudbuild = concrete.FinalizedCloudbuild
	return nil
}

func (r Resource) MarshalJSON() ([]byte, error) {
	var concrete struct {
		FinalizedResource FinalizedResource
		Source            []string
	}
	concrete.FinalizedResource = r.FinalizedResource
	concrete.Source = r.Source
	return json.Marshal(&concrete)
}

func (r *Resource) UnmarshalJSON(bs []byte) error {
	var concrete struct {
		FinalizedResource FinalizedResource
		Source            []string
	}
	err := json.Unmarshal(bs, &concrete)
	if err != nil {
		return err
	}
	r.FinalizedResource = concrete.FinalizedResource
	r.Source = concrete.Source
	return nil
}

func (r Action) MarshalJSON() ([]byte, error) {
	var concrete struct {
		PostAction PostAction
	}
	concrete.PostAction = r.PostAction
	return json.Marshal(&concrete)
}

func (r *Action) UnmarshalJSON(bs []byte) error {
	var concrete struct {
		PostAction PostAction
	}
	err := json.Unmarshal(bs, &concrete)
	if err != nil {
		return err
	}
	r.PostAction = concrete.PostAction
	return nil
}

func (r PostAction) MarshalJSON() ([]byte, error) {
	var concrete struct {
		FinalizedAction FinalizedAction
		Subpath         string
	}
	concrete.FinalizedAction = r.FinalizedAction
	concrete.Subpath = r.Subpath
	return json.Marshal(&concrete)
}

func (r *PostAction) UnmarshalJSON(bs []byte) error {
	var concrete struct {
		FinalizedAction FinalizedAction
		Subpath         string
	}
	err := json.Unmarshal(bs, &concrete)
	if err != nil {
		return err
	}
	r.FinalizedAction = concrete.FinalizedAction
	r.Subpath = concrete.Subpath
	return nil
}

func (r FinalizedCloudbuild) MarshalJSON() ([]byte, error) {
	var concrete struct {
		Ctr *dagger.Container
	}
	concrete.Ctr = r.Ctr
	return json.Marshal(&concrete)
}

func (r *FinalizedCloudbuild) UnmarshalJSON(bs []byte) error {
	var concrete struct {
		Ctr *dagger.Container
	}
	err := json.Unmarshal(bs, &concrete)
	if err != nil {
		return err
	}
	r.Ctr = concrete.Ctr
	return nil
}

func (r FinalizedResource) MarshalJSON() ([]byte, error) {
	var concrete struct {
		Ctr  *dagger.Container
		Name string
	}
	concrete.Ctr = r.Ctr
	concrete.Name = r.Name
	return json.Marshal(&concrete)
}

func (r *FinalizedResource) UnmarshalJSON(bs []byte) error {
	var concrete struct {
		Ctr  *dagger.Container
		Name string
	}
	err := json.Unmarshal(bs, &concrete)
	if err != nil {
		return err
	}
	r.Ctr = concrete.Ctr
	r.Name = concrete.Name
	return nil
}

func (r FinalizedAction) MarshalJSON() ([]byte, error) {
	var concrete struct {
		Ctr *dagger.Container
	}
	concrete.Ctr = r.Ctr
	return json.Marshal(&concrete)
}

func (r *FinalizedAction) UnmarshalJSON(bs []byte) error {
	var concrete struct {
		Ctr *dagger.Container
	}
	err := json.Unmarshal(bs, &concrete)
	if err != nil {
		return err
	}
	r.Ctr = concrete.Ctr
	return nil
}

func main() {
	ctx := context.Background()

	// Direct slog to the new stderr. This is only for dev time debugging, and
	// runtime errors/warnings.
	slog.SetDefault(slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
		Level: slog.LevelWarn,
	})))

	if err := dispatch(ctx); err != nil {
		os.Exit(2)
	}
}

func convertError(rerr error) *dagger.Error {
	var gqlErr *gqlerror.Error
	if errors.As(rerr, &gqlErr) {
		dagErr := dag.Error(gqlErr.Message)
		if gqlErr.Extensions != nil {
			keys := make([]string, 0, len(gqlErr.Extensions))
			for k := range gqlErr.Extensions {
				keys = append(keys, k)
			}
			sort.Strings(keys)
			for _, k := range keys {
				val, err := json.Marshal(gqlErr.Extensions[k])
				if err != nil {
					fmt.Println("failed to marshal error value:", err)
				}
				dagErr = dagErr.WithValue(k, dagger.JSON(val))
			}
		}
		return dagErr
	}
	return dag.Error(rerr.Error())
}

func dispatch(ctx context.Context) (rerr error) {
	ctx = telemetry.InitEmbedded(ctx, resource.NewWithAttributes(
		semconv.SchemaURL,
		semconv.ServiceNameKey.String("dagger-go-sdk"),
		// TODO version?
	))
	defer telemetry.Close()

	// A lot of the "work" actually happens when we're marshalling the return
	// value, which entails getting object IDs, which happens in MarshalJSON,
	// which has no ctx argument, so we use this lovely global variable.
	setMarshalContext(ctx)

	fnCall := dag.CurrentFunctionCall()
	defer func() {
		if rerr != nil {
			if err := fnCall.ReturnError(ctx, convertError(rerr)); err != nil {
				fmt.Println("failed to return error:", err, "\noriginal error:", rerr)
			}
		}
	}()

	parentName, err := fnCall.ParentName(ctx)
	if err != nil {
		return fmt.Errorf("get parent name: %w", err)
	}
	fnName, err := fnCall.Name(ctx)
	if err != nil {
		return fmt.Errorf("get fn name: %w", err)
	}
	parentJson, err := fnCall.Parent(ctx)
	if err != nil {
		return fmt.Errorf("get fn parent: %w", err)
	}
	fnArgs, err := fnCall.InputArgs(ctx)
	if err != nil {
		return fmt.Errorf("get fn args: %w", err)
	}

	inputArgs := map[string][]byte{}
	for _, fnArg := range fnArgs {
		argName, err := fnArg.Name(ctx)
		if err != nil {
			return fmt.Errorf("get fn arg name: %w", err)
		}
		argValue, err := fnArg.Value(ctx)
		if err != nil {
			return fmt.Errorf("get fn arg value: %w", err)
		}
		inputArgs[argName] = []byte(argValue)
	}

	result, err := invoke(ctx, []byte(parentJson), parentName, fnName, inputArgs)
	if err != nil {
		var exec *dagger.ExecError
		if errors.As(err, &exec) {
			return exec.Unwrap()
		}
		return err
	}
	resultBytes, err := json.Marshal(result)
	if err != nil {
		return fmt.Errorf("marshal: %w", err)
	}

	if err := fnCall.ReturnValue(ctx, dagger.JSON(resultBytes)); err != nil {
		return fmt.Errorf("store return value: %w", err)
	}
	return nil
}
func invoke(ctx context.Context, parentJSON []byte, parentName string, fnName string, inputArgs map[string][]byte) (_ any, err error) {
	_ = inputArgs
	switch parentName {
	case "Action":
		switch fnName {
		case "Main":
			var parent Action
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Action).Main(&parent, ctx)
		case "Post":
			var parent Action
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Action).Post(&parent, ctx)
		case "Container":
			var parent Action
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Action).Container(&parent), nil
		case "Terminal":
			var parent Action
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Action).Terminal(&parent), nil
		case "Stdout":
			var parent Action
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Action).Stdout(&parent, ctx)
		case "Stderr":
			var parent Action
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Action).Stderr(&parent, ctx)
		case "CombinedOutput":
			var parent Action
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Action).CombinedOutput(&parent, ctx)
		case "Workspace":
			var parent Action
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Action).Workspace(&parent), nil
		case "Toolcache":
			var parent Action
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Action).Toolcache(&parent), nil
		case "Action":
			var parent Action
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Action).Action(&parent), nil
		case "Home":
			var parent Action
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Action).Home(&parent), nil
		case "Env":
			var parent Action
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Action).Env(&parent, ctx)
		case "State":
			var parent Action
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Action).State(&parent, ctx)
		case "Output":
			var parent Action
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Action).Output(&parent, ctx)
		default:
			return nil, fmt.Errorf("unknown function %s", fnName)
		}
	case "Cloudbuild":
		switch fnName {
		case "Run":
			var parent Cloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Cloudbuild).Run(&parent, ctx)
		case "Container":
			var parent Cloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Cloudbuild).Container(&parent), nil
		case "Terminal":
			var parent Cloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Cloudbuild).Terminal(&parent), nil
		case "Stdout":
			var parent Cloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Cloudbuild).Stdout(&parent, ctx)
		case "Stderr":
			var parent Cloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Cloudbuild).Stderr(&parent, ctx)
		case "CombinedOutput":
			var parent Cloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Cloudbuild).CombinedOutput(&parent, ctx)
		case "Workspace":
			var parent Cloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Cloudbuild).Workspace(&parent), nil
		case "Workdir":
			var parent Cloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Cloudbuild).Workdir(&parent), nil
		default:
			return nil, fmt.Errorf("unknown function %s", fnName)
		}
	case "FinalizedAction":
		switch fnName {
		case "Container":
			var parent FinalizedAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedAction).Container(&parent), nil
		case "Terminal":
			var parent FinalizedAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedAction).Terminal(&parent), nil
		case "Stdout":
			var parent FinalizedAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedAction).Stdout(&parent, ctx)
		case "Stderr":
			var parent FinalizedAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedAction).Stderr(&parent, ctx)
		case "CombinedOutput":
			var parent FinalizedAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedAction).CombinedOutput(&parent, ctx)
		case "Workspace":
			var parent FinalizedAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedAction).Workspace(&parent), nil
		case "Toolcache":
			var parent FinalizedAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedAction).Toolcache(&parent), nil
		case "Action":
			var parent FinalizedAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedAction).Action(&parent), nil
		case "Home":
			var parent FinalizedAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedAction).Home(&parent), nil
		case "Env":
			var parent FinalizedAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedAction).Env(&parent, ctx)
		case "State":
			var parent FinalizedAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedAction).State(&parent, ctx)
		case "Output":
			var parent FinalizedAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedAction).Output(&parent, ctx)
		default:
			return nil, fmt.Errorf("unknown function %s", fnName)
		}
	case "FinalizedCloudbuild":
		switch fnName {
		case "Container":
			var parent FinalizedCloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedCloudbuild).Container(&parent), nil
		case "Terminal":
			var parent FinalizedCloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedCloudbuild).Terminal(&parent), nil
		case "Stdout":
			var parent FinalizedCloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedCloudbuild).Stdout(&parent, ctx)
		case "Stderr":
			var parent FinalizedCloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedCloudbuild).Stderr(&parent, ctx)
		case "CombinedOutput":
			var parent FinalizedCloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedCloudbuild).CombinedOutput(&parent, ctx)
		case "Workspace":
			var parent FinalizedCloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedCloudbuild).Workspace(&parent), nil
		case "Workdir":
			var parent FinalizedCloudbuild
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedCloudbuild).Workdir(&parent), nil
		default:
			return nil, fmt.Errorf("unknown function %s", fnName)
		}
	case "FinalizedResource":
		switch fnName {
		case "Container":
			var parent FinalizedResource
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedResource).Container(&parent), nil
		case "Terminal":
			var parent FinalizedResource
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedResource).Terminal(&parent), nil
		case "Workdir":
			var parent FinalizedResource
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*FinalizedResource).Workdir(&parent), nil
		default:
			return nil, fmt.Errorf("unknown function %s", fnName)
		}
	case "Forge":
		switch fnName {
		case "Use":
			var parent Forge
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var action string
			if inputArgs["action"] != nil {
				err = json.Unmarshal([]byte(inputArgs["action"]), &action)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg action", err))
				}
			}
			var repo *dagger.Directory
			if inputArgs["repo"] != nil {
				err = json.Unmarshal([]byte(inputArgs["repo"]), &repo)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg repo", err))
				}
			}
			var workspace *dagger.Directory
			if inputArgs["workspace"] != nil {
				err = json.Unmarshal([]byte(inputArgs["workspace"]), &workspace)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg workspace", err))
				}
			}
			var with []string
			if inputArgs["with"] != nil {
				err = json.Unmarshal([]byte(inputArgs["with"]), &with)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg with", err))
				}
			}
			var env []string
			if inputArgs["env"] != nil {
				err = json.Unmarshal([]byte(inputArgs["env"]), &env)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg env", err))
				}
			}
			var debug bool
			if inputArgs["debug"] != nil {
				err = json.Unmarshal([]byte(inputArgs["debug"]), &debug)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg debug", err))
				}
			}
			var token *dagger.Secret
			if inputArgs["token"] != nil {
				err = json.Unmarshal([]byte(inputArgs["token"]), &token)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg token", err))
				}
			}
			return (*Forge).Use(&parent, ctx, action, repo, workspace, with, env, debug, token)
		case "Cloudbuild":
			var parent Forge
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var name string
			if inputArgs["name"] != nil {
				err = json.Unmarshal([]byte(inputArgs["name"]), &name)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg name", err))
				}
			}
			var workdir *dagger.Directory
			if inputArgs["workdir"] != nil {
				err = json.Unmarshal([]byte(inputArgs["workdir"]), &workdir)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg workdir", err))
				}
			}
			var entrypoint []string
			if inputArgs["entrypoint"] != nil {
				err = json.Unmarshal([]byte(inputArgs["entrypoint"]), &entrypoint)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg entrypoint", err))
				}
			}
			var args []string
			if inputArgs["args"] != nil {
				err = json.Unmarshal([]byte(inputArgs["args"]), &args)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg args", err))
				}
			}
			var env []string
			if inputArgs["env"] != nil {
				err = json.Unmarshal([]byte(inputArgs["env"]), &env)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg env", err))
				}
			}
			var gcloudConfig *dagger.Directory
			if inputArgs["gcloudConfig"] != nil {
				err = json.Unmarshal([]byte(inputArgs["gcloudConfig"]), &gcloudConfig)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg gcloudConfig", err))
				}
			}
			var script *dagger.File
			if inputArgs["script"] != nil {
				err = json.Unmarshal([]byte(inputArgs["script"]), &script)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg script", err))
				}
			}
			var substitutions []string
			if inputArgs["substitutions"] != nil {
				err = json.Unmarshal([]byte(inputArgs["substitutions"]), &substitutions)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg substitutions", err))
				}
			}
			var dynamicSubstitutions bool
			if inputArgs["dynamicSubstitutions"] != nil {
				err = json.Unmarshal([]byte(inputArgs["dynamicSubstitutions"]), &dynamicSubstitutions)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg dynamicSubstitutions", err))
				}
			}
			var automapSubstitutions bool
			if inputArgs["automapSubstitutions"] != nil {
				err = json.Unmarshal([]byte(inputArgs["automapSubstitutions"]), &automapSubstitutions)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg automapSubstitutions", err))
				}
			}
			return (*Forge).Cloudbuild(&parent, ctx, name, workdir, entrypoint, args, env, gcloudConfig, script, substitutions, dynamicSubstitutions, automapSubstitutions)
		case "Resource":
			var parent Forge
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var resource string
			if inputArgs["resource"] != nil {
				err = json.Unmarshal([]byte(inputArgs["resource"]), &resource)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg resource", err))
				}
			}
			var pipeline *dagger.File
			if inputArgs["pipeline"] != nil {
				err = json.Unmarshal([]byte(inputArgs["pipeline"]), &pipeline)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg pipeline", err))
				}
			}
			var workdir *dagger.Directory
			if inputArgs["workdir"] != nil {
				err = json.Unmarshal([]byte(inputArgs["workdir"]), &workdir)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg workdir", err))
				}
			}
			return (*Forge).Resource(&parent, ctx, resource, pipeline, workdir)
		default:
			return nil, fmt.Errorf("unknown function %s", fnName)
		}
	case "PostAction":
		switch fnName {
		case "Post":
			var parent PostAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PostAction).Post(&parent, ctx)
		case "Container":
			var parent PostAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PostAction).Container(&parent), nil
		case "Terminal":
			var parent PostAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PostAction).Terminal(&parent), nil
		case "Stdout":
			var parent PostAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PostAction).Stdout(&parent, ctx)
		case "Stderr":
			var parent PostAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PostAction).Stderr(&parent, ctx)
		case "CombinedOutput":
			var parent PostAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PostAction).CombinedOutput(&parent, ctx)
		case "Workspace":
			var parent PostAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PostAction).Workspace(&parent), nil
		case "Toolcache":
			var parent PostAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PostAction).Toolcache(&parent), nil
		case "Action":
			var parent PostAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PostAction).Action(&parent), nil
		case "Home":
			var parent PostAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PostAction).Home(&parent), nil
		case "Env":
			var parent PostAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PostAction).Env(&parent, ctx)
		case "State":
			var parent PostAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PostAction).State(&parent, ctx)
		case "Output":
			var parent PostAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PostAction).Output(&parent, ctx)
		default:
			return nil, fmt.Errorf("unknown function %s", fnName)
		}
	case "PreAction":
		switch fnName {
		case "Pre":
			var parent PreAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PreAction).Pre(&parent, ctx)
		case "Main":
			var parent PreAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PreAction).Main(&parent, ctx)
		case "Post":
			var parent PreAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PreAction).Post(&parent, ctx)
		case "Container":
			var parent PreAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PreAction).Container(&parent), nil
		case "Terminal":
			var parent PreAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PreAction).Terminal(&parent), nil
		case "Stdout":
			var parent PreAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PreAction).Stdout(&parent, ctx)
		case "Stderr":
			var parent PreAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PreAction).Stderr(&parent, ctx)
		case "CombinedOutput":
			var parent PreAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PreAction).CombinedOutput(&parent, ctx)
		case "Workspace":
			var parent PreAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PreAction).Workspace(&parent), nil
		case "Toolcache":
			var parent PreAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PreAction).Toolcache(&parent), nil
		case "Home":
			var parent PreAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PreAction).Home(&parent), nil
		case "Env":
			var parent PreAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PreAction).Env(&parent, ctx)
		case "State":
			var parent PreAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PreAction).State(&parent, ctx)
		case "Output":
			var parent PreAction
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*PreAction).Output(&parent, ctx)
		default:
			return nil, fmt.Errorf("unknown function %s", fnName)
		}
	case "Resource":
		switch fnName {
		case "Get":
			var parent Resource
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var version []string
			if inputArgs["version"] != nil {
				err = json.Unmarshal([]byte(inputArgs["version"]), &version)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg version", err))
				}
			}
			var param []string
			if inputArgs["param"] != nil {
				err = json.Unmarshal([]byte(inputArgs["param"]), &param)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg param", err))
				}
			}
			return (*Resource).Get(&parent, version, param)
		case "Check":
			var parent Resource
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var version []string
			if inputArgs["version"] != nil {
				err = json.Unmarshal([]byte(inputArgs["version"]), &version)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg version", err))
				}
			}
			return (*Resource).Check(&parent, version)
		case "Put":
			var parent Resource
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var param []string
			if inputArgs["param"] != nil {
				err = json.Unmarshal([]byte(inputArgs["param"]), &param)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg param", err))
				}
			}
			return (*Resource).Put(&parent, param)
		case "Container":
			var parent Resource
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Resource).Container(&parent), nil
		case "Terminal":
			var parent Resource
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Resource).Terminal(&parent), nil
		case "Workdir":
			var parent Resource
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return (*Resource).Workdir(&parent), nil
		default:
			return nil, fmt.Errorf("unknown function %s", fnName)
		}
	case "":
		return dag.Module().
			WithDescription("A generated module for Forge functions\n").
			WithObject(
				dag.TypeDef().WithObject("Forge", dagger.TypeDefWithObjectOpts{Description: "Forge is the struct that methods are defined on for forge's Dagger module.", SourceMap: dag.SourceMap("use.go", 57, 6)}).
					WithFunction(
						dag.Function("Use",
							dag.TypeDef().WithObject("PreAction")).
							WithDescription("Use creates a container to execute a GitHub Action in.").
							WithSourceMap(dag.SourceMap("use.go", 97, 1)).
							WithArg("action", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("use.go", 99, 2)}).
							WithArg("repo", dag.TypeDef().WithObject("Directory").WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("use.go", 101, 2), DefaultPath: "."}).
							WithArg("workspace", dag.TypeDef().WithObject("Directory").WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("use.go", 103, 2), DefaultPath: "."}).
							WithArg("with", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("use.go", 105, 2)}).
							WithArg("env", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("use.go", 107, 2)}).
							WithArg("debug", dag.TypeDef().WithKind(dagger.TypeDefKindBooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("use.go", 109, 2)}).
							WithArg("token", dag.TypeDef().WithObject("Secret").WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("use.go", 111, 2)})).
					WithFunction(
						dag.Function("Cloudbuild",
							dag.TypeDef().WithObject("Cloudbuild")).
							WithSourceMap(dag.SourceMap("cloudbuild.go", 26, 1)).
							WithArg("name", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("cloudbuild.go", 28, 2)}).
							WithArg("workdir", dag.TypeDef().WithObject("Directory").WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("cloudbuild.go", 30, 2), DefaultPath: "."}).
							WithArg("entrypoint", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("cloudbuild.go", 32, 2)}).
							WithArg("args", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("cloudbuild.go", 34, 2)}).
							WithArg("env", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("cloudbuild.go", 36, 2)}).
							WithArg("gcloudConfig", dag.TypeDef().WithObject("Directory").WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("cloudbuild.go", 38, 2)}).
							WithArg("script", dag.TypeDef().WithObject("File").WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("cloudbuild.go", 40, 2)}).
							WithArg("substitutions", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("cloudbuild.go", 42, 2)}).
							WithArg("dynamicSubstitutions", dag.TypeDef().WithKind(dagger.TypeDefKindBooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("cloudbuild.go", 44, 2)}).
							WithArg("automapSubstitutions", dag.TypeDef().WithKind(dagger.TypeDefKindBooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("cloudbuild.go", 46, 2)})).
					WithFunction(
						dag.Function("Resource",
							dag.TypeDef().WithObject("Resource")).
							WithSourceMap(dag.SourceMap("resource.go", 24, 1)).
							WithArg("resource", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("resource.go", 26, 2)}).
							WithArg("pipeline", dag.TypeDef().WithObject("File").WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("resource.go", 28, 2), DefaultPath: ".forge.yml"}).
							WithArg("workdir", dag.TypeDef().WithObject("Directory").WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("resource.go", 30, 2), DefaultPath: "."}))).
			WithObject(
				dag.TypeDef().WithObject("PreAction", dagger.TypeDefWithObjectOpts{Description: "PreAction has a container that's prepared to execute an action and the subpath to that\naction, but has not yet executed the pre-step.", SourceMap: dag.SourceMap("use.go", 74, 6)}).
					WithFunction(
						dag.Function("Pre",
							dag.TypeDef().WithObject("Action")).
							WithDescription("Pre executes the pre-step of the GitHub Action in the underlying container.").
							WithSourceMap(dag.SourceMap("use.go", 208, 1))).
					WithFunction(
						dag.Function("Main",
							dag.TypeDef().WithObject("PostAction")).
							WithDescription("Main executes the pre- and main steps of the GitHub Action in the underlying container.").
							WithSourceMap(dag.SourceMap("use.go", 274, 1))).
					WithFunction(
						dag.Function("Post",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Post executes the pre-, main and post-steps of the GitHub Action in the underlying container.").
							WithSourceMap(dag.SourceMap("use.go", 317, 1))).
					WithFunction(
						dag.Function("Container",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Container gives access to the underlying container.").
							WithSourceMap(dag.SourceMap("use.go", 337, 1))).
					WithFunction(
						dag.Function("Terminal",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Terminal is a convenient alias for Container().Terminal().").
							WithSourceMap(dag.SourceMap("use.go", 342, 1))).
					WithFunction(
						dag.Function("Stdout",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Stdout is a convenient alias for Container().Stdout().").
							WithSourceMap(dag.SourceMap("use.go", 347, 1))).
					WithFunction(
						dag.Function("Stderr",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Stderr is a convenient alias for Container().Stderr().").
							WithSourceMap(dag.SourceMap("use.go", 352, 1))).
					WithFunction(
						dag.Function("CombinedOutput",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("CombinedOutput is a convenient alias for Container().CombinedOutput().").
							WithSourceMap(dag.SourceMap("use.go", 357, 1))).
					WithFunction(
						dag.Function("Workspace",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Workspace returns the current state of the GITHUB_WORKSPACE directory.").
							WithSourceMap(dag.SourceMap("use.go", 362, 1))).
					WithFunction(
						dag.Function("Toolcache",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Toolcache returns the current state of the RUNNER_TOOLCACHE directory.").
							WithSourceMap(dag.SourceMap("use.go", 367, 1))).
					WithFunction(
						dag.Function("Home",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Home returns the current state of the HOME directory.").
							WithSourceMap(dag.SourceMap("use.go", 377, 1))).
					WithFunction(
						dag.Function("Env",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Env returns the parsed key-value pairs that were saved to GITHUB_ENV.").
							WithSourceMap(dag.SourceMap("use.go", 382, 1))).
					WithFunction(
						dag.Function("State",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("State returns the parsed key-value pairs that were saved to GITHUB_STATE.").
							WithSourceMap(dag.SourceMap("use.go", 392, 1))).
					WithFunction(
						dag.Function("Output",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Output returns the parsed key-value pairs that were saved to GITHUB_OUTPUT.").
							WithSourceMap(dag.SourceMap("use.go", 402, 1))).
					WithField("Action", dag.TypeDef().WithObject("Action"), dagger.TypeDefWithFieldOpts{SourceMap: dag.SourceMap("use.go", 75, 2)})).
			WithObject(
				dag.TypeDef().WithObject("Cloudbuild", dagger.TypeDefWithObjectOpts{SourceMap: dag.SourceMap("cloudbuild.go", 13, 6)}).
					WithFunction(
						dag.Function("Run",
							dag.TypeDef().WithObject("FinalizedCloudbuild")).
							WithDescription("Run executes the cloudbuild.").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 124, 1))).
					WithFunction(
						dag.Function("Container",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Container gives access to the underlying container.").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 133, 1))).
					WithFunction(
						dag.Function("Terminal",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Terminal is a convenient alias for Container().Terminal().").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 138, 1))).
					WithFunction(
						dag.Function("Stdout",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Stdout is a convenient alias for Container().Stdout().").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 143, 1))).
					WithFunction(
						dag.Function("Stderr",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Stderr is a convenient alias for Container().Stderr().").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 148, 1))).
					WithFunction(
						dag.Function("CombinedOutput",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("CombinedOutput is a convenient alias for Container().CombinedOutput().").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 153, 1))).
					WithFunction(
						dag.Function("Workspace",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Workspace returns the current state of the /workspace directory.").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 158, 1))).
					WithFunction(
						dag.Function("Workdir",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Workdir returns the current state of the working directory.").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 163, 1))).
					WithField("FinalizedCloudbuild", dag.TypeDef().WithObject("FinalizedCloudbuild"), dagger.TypeDefWithFieldOpts{SourceMap: dag.SourceMap("cloudbuild.go", 14, 2)})).
			WithObject(
				dag.TypeDef().WithObject("Resource", dagger.TypeDefWithObjectOpts{SourceMap: dag.SourceMap("resource.go", 15, 6)}).
					WithFunction(
						dag.Function("Get",
							dag.TypeDef().WithObject("FinalizedResource")).
							WithDescription("Get runs the get step.").
							WithSourceMap(dag.SourceMap("resource.go", 94, 1)).
							WithArg("version", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("resource.go", 96, 2)}).
							WithArg("param", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("resource.go", 98, 2)})).
					WithFunction(
						dag.Function("Check",
							dag.TypeDef().WithObject("FinalizedResource")).
							WithDescription("Check runs the check step.").
							WithSourceMap(dag.SourceMap("resource.go", 118, 1)).
							WithArg("version", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("resource.go", 120, 2)})).
					WithFunction(
						dag.Function("Put",
							dag.TypeDef().WithObject("FinalizedResource")).
							WithDescription("Put runs the put step.").
							WithSourceMap(dag.SourceMap("resource.go", 135, 1)).
							WithArg("param", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("resource.go", 137, 2)})).
					WithFunction(
						dag.Function("Container",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Container gives access to the underlying container.").
							WithSourceMap(dag.SourceMap("resource.go", 202, 1))).
					WithFunction(
						dag.Function("Terminal",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Terminal is a convenient alias for Container().Terminal().").
							WithSourceMap(dag.SourceMap("resource.go", 207, 1))).
					WithFunction(
						dag.Function("Workdir",
							dag.TypeDef().WithObject("Directory")).
							WithSourceMap(dag.SourceMap("resource.go", 211, 1))).
					WithField("FinalizedResource", dag.TypeDef().WithObject("FinalizedResource"), dagger.TypeDefWithFieldOpts{SourceMap: dag.SourceMap("resource.go", 16, 2)}).
					WithField("Source", dag.TypeDef().WithListOf(dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)), dagger.TypeDefWithFieldOpts{SourceMap: dag.SourceMap("resource.go", 17, 2)})).
			WithObject(
				dag.TypeDef().WithObject("Action", dagger.TypeDefWithObjectOpts{Description: "Action has a container that's prepared to execute an action and the subpath to that\naction, but has not yet executed the main step.", SourceMap: dag.SourceMap("use.go", 80, 6)}).
					WithFunction(
						dag.Function("Main",
							dag.TypeDef().WithObject("PostAction")).
							WithDescription("Main executes the main step of the GitHub Action in the underlying container.").
							WithSourceMap(dag.SourceMap("use.go", 246, 1))).
					WithFunction(
						dag.Function("Post",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Post executes the main and post-steps of the GitHub Action in the underlying container.").
							WithSourceMap(dag.SourceMap("use.go", 327, 1))).
					WithFunction(
						dag.Function("Container",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Container gives access to the underlying container.").
							WithSourceMap(dag.SourceMap("use.go", 337, 1))).
					WithFunction(
						dag.Function("Terminal",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Terminal is a convenient alias for Container().Terminal().").
							WithSourceMap(dag.SourceMap("use.go", 342, 1))).
					WithFunction(
						dag.Function("Stdout",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Stdout is a convenient alias for Container().Stdout().").
							WithSourceMap(dag.SourceMap("use.go", 347, 1))).
					WithFunction(
						dag.Function("Stderr",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Stderr is a convenient alias for Container().Stderr().").
							WithSourceMap(dag.SourceMap("use.go", 352, 1))).
					WithFunction(
						dag.Function("CombinedOutput",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("CombinedOutput is a convenient alias for Container().CombinedOutput().").
							WithSourceMap(dag.SourceMap("use.go", 357, 1))).
					WithFunction(
						dag.Function("Workspace",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Workspace returns the current state of the GITHUB_WORKSPACE directory.").
							WithSourceMap(dag.SourceMap("use.go", 362, 1))).
					WithFunction(
						dag.Function("Toolcache",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Toolcache returns the current state of the RUNNER_TOOLCACHE directory.").
							WithSourceMap(dag.SourceMap("use.go", 367, 1))).
					WithFunction(
						dag.Function("Action",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Action returns the current state of the GITHUB_ACTION_PATH directory.").
							WithSourceMap(dag.SourceMap("use.go", 372, 1))).
					WithFunction(
						dag.Function("Home",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Home returns the current state of the HOME directory.").
							WithSourceMap(dag.SourceMap("use.go", 377, 1))).
					WithFunction(
						dag.Function("Env",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Env returns the parsed key-value pairs that were saved to GITHUB_ENV.").
							WithSourceMap(dag.SourceMap("use.go", 382, 1))).
					WithFunction(
						dag.Function("State",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("State returns the parsed key-value pairs that were saved to GITHUB_STATE.").
							WithSourceMap(dag.SourceMap("use.go", 392, 1))).
					WithFunction(
						dag.Function("Output",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Output returns the parsed key-value pairs that were saved to GITHUB_OUTPUT.").
							WithSourceMap(dag.SourceMap("use.go", 402, 1))).
					WithField("PostAction", dag.TypeDef().WithObject("PostAction"), dagger.TypeDefWithFieldOpts{SourceMap: dag.SourceMap("use.go", 81, 2)})).
			WithObject(
				dag.TypeDef().WithObject("PostAction", dagger.TypeDefWithObjectOpts{Description: "PostAction has a container that's prepared to execute an action and the subpath to that\naction, but has not yet executed the post-step.", SourceMap: dag.SourceMap("use.go", 86, 6)}).
					WithFunction(
						dag.Function("Post",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Post executes the post-step of the GitHub Action in the underlying container.").
							WithSourceMap(dag.SourceMap("use.go", 284, 1))).
					WithFunction(
						dag.Function("Container",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Container gives access to the underlying container.").
							WithSourceMap(dag.SourceMap("use.go", 337, 1))).
					WithFunction(
						dag.Function("Terminal",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Terminal is a convenient alias for Container().Terminal().").
							WithSourceMap(dag.SourceMap("use.go", 342, 1))).
					WithFunction(
						dag.Function("Stdout",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Stdout is a convenient alias for Container().Stdout().").
							WithSourceMap(dag.SourceMap("use.go", 347, 1))).
					WithFunction(
						dag.Function("Stderr",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Stderr is a convenient alias for Container().Stderr().").
							WithSourceMap(dag.SourceMap("use.go", 352, 1))).
					WithFunction(
						dag.Function("CombinedOutput",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("CombinedOutput is a convenient alias for Container().CombinedOutput().").
							WithSourceMap(dag.SourceMap("use.go", 357, 1))).
					WithFunction(
						dag.Function("Workspace",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Workspace returns the current state of the GITHUB_WORKSPACE directory.").
							WithSourceMap(dag.SourceMap("use.go", 362, 1))).
					WithFunction(
						dag.Function("Toolcache",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Toolcache returns the current state of the RUNNER_TOOLCACHE directory.").
							WithSourceMap(dag.SourceMap("use.go", 367, 1))).
					WithFunction(
						dag.Function("Action",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Action returns the current state of the GITHUB_ACTION_PATH directory.").
							WithSourceMap(dag.SourceMap("use.go", 372, 1))).
					WithFunction(
						dag.Function("Home",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Home returns the current state of the HOME directory.").
							WithSourceMap(dag.SourceMap("use.go", 377, 1))).
					WithFunction(
						dag.Function("Env",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Env returns the parsed key-value pairs that were saved to GITHUB_ENV.").
							WithSourceMap(dag.SourceMap("use.go", 382, 1))).
					WithFunction(
						dag.Function("State",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("State returns the parsed key-value pairs that were saved to GITHUB_STATE.").
							WithSourceMap(dag.SourceMap("use.go", 392, 1))).
					WithFunction(
						dag.Function("Output",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Output returns the parsed key-value pairs that were saved to GITHUB_OUTPUT.").
							WithSourceMap(dag.SourceMap("use.go", 402, 1))).
					WithField("FinalizedAction", dag.TypeDef().WithObject("FinalizedAction"), dagger.TypeDefWithFieldOpts{SourceMap: dag.SourceMap("use.go", 87, 2)}).
					WithField("Subpath", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.TypeDefWithFieldOpts{SourceMap: dag.SourceMap("use.go", 88, 2)})).
			WithObject(
				dag.TypeDef().WithObject("FinalizedCloudbuild", dagger.TypeDefWithObjectOpts{SourceMap: dag.SourceMap("cloudbuild.go", 17, 6)}).
					WithFunction(
						dag.Function("Container",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Container gives access to the underlying container.").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 133, 1))).
					WithFunction(
						dag.Function("Terminal",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Terminal is a convenient alias for Container().Terminal().").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 138, 1))).
					WithFunction(
						dag.Function("Stdout",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Stdout is a convenient alias for Container().Stdout().").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 143, 1))).
					WithFunction(
						dag.Function("Stderr",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Stderr is a convenient alias for Container().Stderr().").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 148, 1))).
					WithFunction(
						dag.Function("CombinedOutput",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("CombinedOutput is a convenient alias for Container().CombinedOutput().").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 153, 1))).
					WithFunction(
						dag.Function("Workspace",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Workspace returns the current state of the /workspace directory.").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 158, 1))).
					WithFunction(
						dag.Function("Workdir",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Workdir returns the current state of the working directory.").
							WithSourceMap(dag.SourceMap("cloudbuild.go", 163, 1))).
					WithField("Ctr", dag.TypeDef().WithObject("Container"), dagger.TypeDefWithFieldOpts{SourceMap: dag.SourceMap("cloudbuild.go", 18, 2)})).
			WithObject(
				dag.TypeDef().WithObject("FinalizedResource", dagger.TypeDefWithObjectOpts{SourceMap: dag.SourceMap("resource.go", 112, 6)}).
					WithFunction(
						dag.Function("Container",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Container gives access to the underlying container.").
							WithSourceMap(dag.SourceMap("resource.go", 202, 1))).
					WithFunction(
						dag.Function("Terminal",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Terminal is a convenient alias for Container().Terminal().").
							WithSourceMap(dag.SourceMap("resource.go", 207, 1))).
					WithFunction(
						dag.Function("Workdir",
							dag.TypeDef().WithObject("Directory")).
							WithSourceMap(dag.SourceMap("resource.go", 211, 1))).
					WithField("Ctr", dag.TypeDef().WithObject("Container"), dagger.TypeDefWithFieldOpts{SourceMap: dag.SourceMap("resource.go", 113, 2)}).
					WithField("Name", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.TypeDefWithFieldOpts{SourceMap: dag.SourceMap("resource.go", 114, 2)})).
			WithObject(
				dag.TypeDef().WithObject("FinalizedAction", dagger.TypeDefWithObjectOpts{Description: "FinalizedAction has a container that's prepared to execute an action and has executed that action.", SourceMap: dag.SourceMap("use.go", 92, 6)}).
					WithFunction(
						dag.Function("Container",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Container gives access to the underlying container.").
							WithSourceMap(dag.SourceMap("use.go", 337, 1))).
					WithFunction(
						dag.Function("Terminal",
							dag.TypeDef().WithObject("Container")).
							WithDescription("Terminal is a convenient alias for Container().Terminal().").
							WithSourceMap(dag.SourceMap("use.go", 342, 1))).
					WithFunction(
						dag.Function("Stdout",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Stdout is a convenient alias for Container().Stdout().").
							WithSourceMap(dag.SourceMap("use.go", 347, 1))).
					WithFunction(
						dag.Function("Stderr",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Stderr is a convenient alias for Container().Stderr().").
							WithSourceMap(dag.SourceMap("use.go", 352, 1))).
					WithFunction(
						dag.Function("CombinedOutput",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("CombinedOutput is a convenient alias for Container().CombinedOutput().").
							WithSourceMap(dag.SourceMap("use.go", 357, 1))).
					WithFunction(
						dag.Function("Workspace",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Workspace returns the current state of the GITHUB_WORKSPACE directory.").
							WithSourceMap(dag.SourceMap("use.go", 362, 1))).
					WithFunction(
						dag.Function("Toolcache",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Toolcache returns the current state of the RUNNER_TOOLCACHE directory.").
							WithSourceMap(dag.SourceMap("use.go", 367, 1))).
					WithFunction(
						dag.Function("Action",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Action returns the current state of the GITHUB_ACTION_PATH directory.").
							WithSourceMap(dag.SourceMap("use.go", 372, 1))).
					WithFunction(
						dag.Function("Home",
							dag.TypeDef().WithObject("Directory")).
							WithDescription("Home returns the current state of the HOME directory.").
							WithSourceMap(dag.SourceMap("use.go", 377, 1))).
					WithFunction(
						dag.Function("Env",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Env returns the parsed key-value pairs that were saved to GITHUB_ENV.").
							WithSourceMap(dag.SourceMap("use.go", 382, 1))).
					WithFunction(
						dag.Function("State",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("State returns the parsed key-value pairs that were saved to GITHUB_STATE.").
							WithSourceMap(dag.SourceMap("use.go", 392, 1))).
					WithFunction(
						dag.Function("Output",
							dag.TypeDef().WithKind(dagger.TypeDefKindStringKind)).
							WithDescription("Output returns the parsed key-value pairs that were saved to GITHUB_OUTPUT.").
							WithSourceMap(dag.SourceMap("use.go", 402, 1))).
					WithField("Ctr", dag.TypeDef().WithObject("Container"), dagger.TypeDefWithFieldOpts{SourceMap: dag.SourceMap("use.go", 93, 2)})), nil
	default:
		return nil, fmt.Errorf("unknown object %s", parentName)
	}
}
